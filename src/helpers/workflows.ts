import { getConfig } from "./config";
import {
  DEFAULT_RUNNER,
  GRAPHS_CI_SCHEDULE,
  RESPONSE_TIME_CI_SCHEDULE,
  STATIC_SITE_CI_SCHEDULE,
  SUMMARY_CI_SCHEDULE,
  UPDATE_TEMPLATE_CI_SCHEDULE,
  UPDATES_CI_SCHEDULE,
  UPTIME_CI_SCHEDULE,
} from "./constants";
import { getOctokit } from "./github";
import { UpptimeConfig } from "../interfaces";

let release: string | undefined = undefined;
export const getUptimeMonitorVersion = async () => {
  if (release) return release;
  const octokit = await getOctokit();
  const releases = await octokit.repos.listReleases({
    owner: "upptime",
    repo: "uptime-monitor",
    per_page: 1,
  });
  release = releases.data[0].tag_name;
  return release;
};

const introComment = async () => `#
# ===============================
# Do not edit this file directly!
# ===============================
#
# Your changes will be overwritten when the Upptime template updates (by default, weekly)
# Instead, change .upptimerc.yml configuration and the workflows will be generated accordingly.
#
# ðŸ”¼ Upptime @${await getUptimeMonitorVersion()}
# GitHub-powered open-source uptime monitor and status page by Anand Chowdhary

# * Source: https://github.com/upptime/upptime
# * Docs and more: https://upptime.js.org
# * More by Anand Chowdhary: https://anandchowdhary.com
`;

const publishPagePrelude = async(config: UpptimeConfig) => {
  const statusWebsite = config["status-website"] || {};
  if (statusWebsite.actions || false) {
    return `
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: \${{ steps.deployment.outputs.page_url }}
`
  } else {
    return `
`
  }
}

const publishPage = async(config: UpptimeConfig) => {
  const commitMessages = config.commitMessages || {};
  const statusWebsite = config["status-website"] || {};
  if (statusWebsite.actions || false) {
    return `
      - uses: actions/configure-pages@v5
        name: Setup Pages
      - uses: actions/upload-pages-artifact@v3
        name: Upload Pages artifact
        with:
          path: "site/status-page/__sapper__/export/"
      - uses: actions/deploy-pages@v4
        name: Deploy to GitHub Pages
    `
  } else {
    return `
      - uses: peaceiris/actions-gh-pages@v4
        name: GitHub Pages Deploy
        with:
          github_token: \${{ secrets.GH_PAT || github.token }}
          publish_dir: "site/status-page/__sapper__/export/"
          force_orphan: "${statusWebsite.singleCommit || false}"
          user_name: "${commitMessages.commitAuthorName || "Upptime Bot"}"
          user_email: "${
      commitMessages.commitAuthorEmail || "73812536+upptime-bot@users.noreply.github.com"
    }"`
  }
}

export const graphsCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};

  return `${await introComment()}

name: Graphs CI
on:
  schedule:
    - cron: "${workflowSchedule.graphs || GRAPHS_CI_SCHEDULE}"
  repository_dispatch:
    types: [graphs]
  workflow_dispatch:
jobs:
  release:
    name: Generate graphs
    runs-on: ${config.runner || DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Generate graphs
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "graphs"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};

const getHasIpV6Site = async (): Promise<boolean> => {
  const config = await getConfig();
  const hasIpV6 = !!config.sites.find((site) => site.ipv6);
  if (hasIpV6) console.log("Detected IPv6 site, adding WARP setup step");
  else
    console.log("No IPv6 sites detected, skipping WARP setup step", JSON.stringify(config.sites));
  return hasIpV6;
};

export const responseTimeCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};

  return `${await introComment()}

name: Response Time CI
on:
  schedule:
    - cron: "${workflowSchedule.responseTime || RESPONSE_TIME_CI_SCHEDULE}"
  repository_dispatch:
    types: [response_time]
  workflow_dispatch:
jobs:
  release:
    name: Check status
    runs-on: ${config.runner || DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update response time
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "response-time"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
          SECRETS_CONTEXT: \${{ toJson(secrets) }}
`;
};

export const setupCiWorkflow = async () => {
  const config = await getConfig();
  const commitMessages = config.commitMessages || {};
  const statusWebsite = config["status-website"] || {};

  return `${await introComment()}

name: Setup CI
on:
  push:
    paths:
      - ".upptimerc.yml"
  repository_dispatch:
    types: [setup]
  workflow_dispatch:
jobs:
  release:
    name: Setup Upptime
    runs-on: ${config.runner || DEFAULT_RUNNER}
    ${await publishPagePrelude(config)}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update template
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "update-template"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
      - name: Update response time
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "response-time"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
          SECRETS_CONTEXT: \${{ toJson(secrets) }}
      - name: Update summary in README
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "readme"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
      - name: Generate graphs
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Graphs CI
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Generate site
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "site"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
${await publishPage(config)}
`;
};

export const siteCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};
  const commitMessages = config.commitMessages || {};
  const statusWebsite = config["status-website"] || {};

  return `${await introComment()}

name: Static Site CI
on:
  schedule:
    - cron: "${workflowSchedule.staticSite || STATIC_SITE_CI_SCHEDULE}"
  repository_dispatch:
    types: [static_site]
  workflow_dispatch:
jobs:
  release:
    name: Build and deploy site
    runs-on: ${config.runner || DEFAULT_RUNNER}
    ${await publishPagePrelude(config)}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Generate site
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "site"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
${await publishPage(config)}
`;
};

export const summaryCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};

  return `${await introComment()}

name: Summary CI
on:
  schedule:
    - cron: "${workflowSchedule.summary || SUMMARY_CI_SCHEDULE}"
  repository_dispatch:
    types: [summary]
  workflow_dispatch:
jobs:
  release:
    name: Generate README
    runs-on: ${config.runner || DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update summary in README
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "readme"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};

export const updateTemplateCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};

  return `${await introComment()}

name: Update Template CI
on:
  schedule:
    - cron: "${workflowSchedule.updateTemplate || UPDATE_TEMPLATE_CI_SCHEDULE}"
  repository_dispatch:
    types: [update_template]
  workflow_dispatch:
jobs:
  release:
    name: Build
    runs-on: ${config.runner || DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update template
        uses: upptime/uptime-monitor@master
        with:
          command: "update-template"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};

export const updatesCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};

  return `${await introComment()}

name: Updates CI
on:
  schedule:
    - cron: "${workflowSchedule.updates || UPDATES_CI_SCHEDULE}"
  repository_dispatch:
    types: [updates]
  workflow_dispatch:
jobs:
  release:
    name: Deploy updates
    runs-on: ${config.runner || DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Update code
        uses: upptime/updates@master
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
`;
};

export const uptimeCiWorkflow = async () => {
  const config = await getConfig();
  const workflowSchedule = config.workflowSchedule || {};

  return `${await introComment()}

name: Uptime CI
on:
  schedule:
    - cron: "${workflowSchedule.uptime || UPTIME_CI_SCHEDULE}"
  repository_dispatch:
    types: [uptime]
  workflow_dispatch:
jobs:
  release:
    name: Check status
    runs-on: ${config.runner || DEFAULT_RUNNER}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}
          token: \${{ secrets.GH_PAT || github.token }}
      - name: Check endpoint status
        uses: upptime/uptime-monitor@${await getUptimeMonitorVersion()}
        with:
          command: "update"
        env:
          GH_PAT: \${{ secrets.GH_PAT || github.token }}
          SECRETS_CONTEXT: \${{ toJson(secrets) }}
`;
};
